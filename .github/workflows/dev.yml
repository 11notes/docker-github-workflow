name: docker
run-name: ${{ inputs.run-name }}

on:
  workflow_dispatch:
    inputs:
      run-name:
        description: 'set run-name for workflow (multiple calls)'
        type: string
        required: false
        default: 'docker'

      release:
        description: 'set WORKFLOW_GITHUB_RELEASE'
        required: false
        default: 'false'

      readme:
        description: 'set WORKFLOW_GITHUB_README'
        required: false
        default: 'false'

      image:
        description: 'set IMAGE'
        required: false

      uid:
        description: 'set IMAGE_UID'
        required: false

      gid:
        description: 'set IMAGE_GID'
        required: false

      semverprefix:
        description: 'prefix for semver tags'
        required: false

      semversuffix:
        description: 'suffix for semver tags'
        required: false

jobs:
  docker:
    runs-on: ubuntu-22.04

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    permissions:
      actions: read
      contents: write
      packages: write
      security-events: write

    steps:   
      - name: init / checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          
      - name: init / inputs to environment
        uses: 11notes/action-inputs-to-env@v1
        with:
          json: '.json'
          input: ${{ toJSON(github.event.inputs) }}

      - name: init / setup environment
        uses: actions/github-script@62c3794a3eb6788d9a2a72b219504732c0c9a298
        with:
          script: |
            const json = `${{ toJSON(github.event.inputs) }}`;
            console.log(json);
            console.log(github.event.inputs);
  



      # DOCKER    
      - name: docker / login to hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: 11notes
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: docker / setup qemu
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a

      - name: docker / setup buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
        with:
          driver-opts: network=host

      - name: docker / build & push & tag grype
        id: docker-build
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d
        with:
          context: .
          file: arch.dockerfile
          push: true
          platforms: ${{ env.IMAGE_ARCH }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}buildcache${{ env.IMAGE_SEMVER_SUFFIX }}
          cache-to: type=registry,ref=localhost:5000/${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}buildcache${{ env.IMAGE_SEMVER_SUFFIX }},mode=max,compression=zstd,force-compression=true
          build-args: |
            APP_IMAGE=${{ env.IMAGE }}
            APP_NAME=${{ env.json_name }}
            APP_VERSION=${{ env.json_semver_version }}
            APP_ROOT=${{ env.json_root }}
            APP_UID=${{ env.IMAGE_UID }}
            APP_GID=${{ env.IMAGE_GID }}
            APP_VERSION_PREFIX=${{ env.IMAGE_SEMVER_PREFIX }}
            APP_VERSION_SUFFIX=${{ env.IMAGE_SEMVER_SUFFIX }}
            APP_VERSION_RC=${{ env.IMAGE_VERSION_RC }}
            APP_NO_CACHE=$(date +%s)
          tags: |
            localhost:5000/${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}grype${{ env.IMAGE_SEMVER_SUFFIX }}

      - name: grype / scan
        if: env.WORKFLOW_GRYPE_SCAN == 'true'
        id: grype
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342
        with:
          image: localhost:5000/${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}grype${{ env.IMAGE_SEMVER_SUFFIX }}
          fail-build: ${{ env.WORKFLOW_GRYPE_FAIL }}
          severity-cutoff: ${{ env.WORKFLOW_GRYPE_SEVERITY_CUTOFF }}
          output-format: 'sarif'
          by-cve: true
          cache-db: true

      - name: grype / fail
        if: failure() || steps.grype.outcome == 'failure'
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342
        with:
          image: localhost:5000/${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}grype${{ env.IMAGE_SEMVER_SUFFIX }}
          fail-build: false
          severity-cutoff: ${{ env.WORKFLOW_GRYPE_SEVERITY_CUTOFF }}
          output-format: 'table'
          by-cve: true
          cache-db: true

      - name: codeql / upload
        if: steps.grype.outcome == 'success'
        uses: github/codeql-action/upload-sarif@48ab28a6f5dbc2a99bf1e0131198dd8f1df78169
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          wait-for-processing: false
          category: grype

      - name: docker / build & push
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d
        with:
          context: .
          file: arch.dockerfile
          push: true
          sbom: true
          provenance: mode=max
          platforms: ${{ env.IMAGE_ARCH }}
          cache-from: type=registry,ref=localhost:5000/${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}buildcache${{ env.IMAGE_SEMVER_SUFFIX }}
          cache-to: type=registry,ref=${{ env.IMAGE }}:${{ env.IMAGE_SEMVER_PREFIX }}buildcache${{ env.IMAGE_SEMVER_SUFFIX }},mode=max,compression=zstd,force-compression=true
          build-args: |
            APP_IMAGE=${{ env.IMAGE }}
            APP_NAME=${{ env.json_name }}
            APP_VERSION=${{ env.json_semver_version }}
            APP_ROOT=${{ env.json_root }}
            APP_UID=${{ env.IMAGE_UID }}
            APP_GID=${{ env.IMAGE_GID }}
            APP_VERSION_PREFIX=${{ env.IMAGE_SEMVER_PREFIX }}
            APP_VERSION_SUFFIX=${{ env.IMAGE_SEMVER_SUFFIX }}
            APP_VERSION_RC=${{ env.IMAGE_VERSION_RC }}
            APP_NO_CACHE=$(date +%s)
          tags: |
            ${{ env.IMAGE_TAGS }}



      # RELEASE      
      - name: github / release / log
        continue-on-error: true
        id: git-log
        run: |
          LOCAL_LAST_TAG=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)
          echo "using last tag: ${LOCAL_LAST_TAG}"
          LOCAL_COMMITS=$(git log ${LOCAL_LAST_TAG}..HEAD --oneline)

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "commits<<${EOF}" >> ${GITHUB_OUTPUT}
          echo "${LOCAL_COMMITS}" >> ${GITHUB_OUTPUT}
          echo "${EOF}" >> ${GITHUB_OUTPUT}

      - name: github / release / markdown
        if: env.WORKFLOW_GITHUB_RELEASE == 'true'  && steps.git-log.outcome == 'success'
        id: git-release
        uses: 11notes/action-docker-release@v1
        with:
          git_log: ${{ steps.git-log.outputs.commits }}

      - name: github / release / create
        if: env.WORKFLOW_GITHUB_RELEASE == 'true' && steps.git-release.outcome == 'success'
        uses: actions/create-release@4c11c9fe1dcd9636620a16455165783b20fc7ea0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.git-release.outputs.release }}
          draft: false
          prerelease: false



      # README
      - name: github / checkout master
        continue-on-error: true
        run: |         
          git checkout master

      - name: github / create README.md
        id: github-readme
        continue-on-error: true
        if: env.WORKFLOW_GITHUB_README == 'true' && steps.docker-build.outcome == 'success'
        uses: 11notes/action-docker-readme@v1
        with:
          sarif_file: ${{ steps.grype.outputs.sarif }}
          build_output_metadata: ${{ steps.docker-build.outputs.metadata }}

      - name: github / commit & push
        continue-on-error: true
        if: steps.github-readme.outcome == 'success' && hashFiles('README.md') != ''
        run: |         
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "auto update README.md"
          git push

      - name: docker / push README.md to docker hub
        continue-on-error: true
        if: steps.github-readme.outcome == 'success' && hashFiles('README.md') != ''
        uses: christian-korneck/update-container-description-action@d36005551adeaba9698d8d67a296bd16fa91f8e8
        env:
          DOCKER_USER: 11notes
          DOCKER_PASS: ${{ secrets.DOCKER_TOKEN }}
        with:
          destination_container_repo: ${{ env.IMAGE }}
          provider: dockerhub
          short_description: ${{ env.json_readme_description }}
          readme_file: 'README.md'
      


      # REPOSITORY SETTINGS
      - name: github / update description and set repo defaults
        run: |
          curl --request PATCH \
            --url https://api.github.com/repos/${{ github.repository }} \
            --header 'authorization: Bearer ${{ secrets.REPOSITORY_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{
              "description":"${{ env.json_readme_description }}",
              "homepage":"",
              "has_issues":true,
              "has_discussions":true,
              "has_projects":false,
              "has_wiki":false
            }' \
            --fail